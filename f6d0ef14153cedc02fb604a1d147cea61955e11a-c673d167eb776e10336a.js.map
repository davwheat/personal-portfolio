{"version":3,"file":"f6d0ef14153cedc02fb604a1d147cea61955e11a-c673d167eb776e10336a.js","mappings":"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","sources":["webpack://personal-portfolio/./node_modules/mdi-react/SearchIcon.js","webpack://personal-portfolio/./src/components/Design/Breadcrumbs.tsx","webpack://personal-portfolio/./src/components/Inputs/TextBox.tsx","webpack://personal-portfolio/./src/components/Links/ButtonLink.tsx","webpack://personal-portfolio/./src/functions/bandNumberToFrequency.ts","webpack://personal-portfolio/./src/functions/bandNumberToName.ts","webpack://personal-portfolio/./src/components/MobileNetworking/AllSpectrumMaps.tsx","webpack://personal-portfolio/./src/functions/hooks/useStateWithLocalStorage.tsx","webpack://personal-portfolio/./src/functions/ArfcnConversion/arfcnToBand.ts","webpack://personal-portfolio/./src/data/SpectrumAllocation/index.ts"],"sourcesContent":["'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar React = _interopDefault(require('react'));\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar SearchIcon = function SearchIcon(_ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === undefined ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === undefined ? 24 : _ref$size,\n      children = _ref.children,\n      props = objectWithoutProperties(_ref, ['color', 'size', 'children']);\n  var className = 'mdi-icon ' + (props.className || '');\n  return React.createElement('svg', _extends({}, props, {\n    className: className,\n    width: size,\n    height: size,\n    fill: color,\n    viewBox: '0 0 24 24'\n  }), React.createElement('path', {\n    d: 'M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z'\n  }));\n};\n\nvar SearchIcon$1 = React.memo ? React.memo(SearchIcon) : SearchIcon;\nmodule.exports = SearchIcon$1;","import React, { useState } from 'react'\n\nimport { makeStyles } from '@material-ui/core'\n\nimport Section from '@components/Design/Section'\nimport Link from '@components/Links/Link'\nimport ButtonLink from '@components/Links/ButtonLink'\n\nexport interface IBreadcrumb {\n  /**\n   * URL for the page\n   */\n  url: string\n  /**\n   * Textual label\n   */\n  t: string\n}\n\nexport interface IBreadcrumbsProps {\n  data: IBreadcrumb[]\n}\n\nconst useStyles = makeStyles({\n  listRoot: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: 0,\n    padding: 0,\n  },\n\n  separator: {\n    margin: '0 8px',\n    WebkitUserSelect: 'none',\n    userSelect: 'none',\n  },\n})\n\nexport default function Breadcrumbs({ data }: IBreadcrumbsProps) {\n  const classes = useStyles()\n  const breadcrumbsToDisplay: (IBreadcrumb | null)[] = []\n\n  const [breadcrumbsExpanded, setBreadcrumbsExpanded] = useState(false)\n\n  // Limit breadcrumbs to 3 items\n  if (breadcrumbsExpanded || data.length <= 3) breadcrumbsToDisplay.push(...data)\n  else {\n    breadcrumbsToDisplay.push(data[0])\n    breadcrumbsToDisplay.push(null)\n    breadcrumbsToDisplay.push(data[data.length - 2], data[data.length - 1])\n  }\n\n  return (\n    <Section width=\"wider\" darker usePadding>\n      <nav aria-label=\"Breadcrumbs\">\n        <ol className={classes.listRoot}>\n          {breadcrumbsToDisplay.map((crumb, index) => {\n            const separator = index < breadcrumbsToDisplay.length - 1 && (\n              <span className={classes.separator} aria-hidden=\"true\">\n                /\n              </span>\n            )\n\n            if (crumb === null) {\n              return (\n                <li key=\"__ellipses__\">\n                  <ButtonLink aria-label=\"Expand breadcrumbs\" data-tooltip onClick={() => setBreadcrumbsExpanded(true)}>\n                    ...\n                  </ButtonLink>\n                  {separator}\n                </li>\n              )\n            }\n\n            return (\n              <li key={crumb.url}>\n                <Link href={crumb.url} aria-current={index === breadcrumbsToDisplay.length - 1 ? 'page' : undefined}>\n                  {crumb.t}\n                </Link>\n                {separator}\n              </li>\n            )\n          })}\n        </ol>\n      </nav>\n\n      {/* JSON-LD breadcrumb data for crawlers */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify({\n          '@context': 'https://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: data.map((crumb, i) => ({\n            '@type': 'ListItem',\n            position: i,\n            item: {\n              '@id': 'https://davwheat.dev' + crumb.url,\n              name: crumb.t,\n            },\n          })),\n        })}\n      </script>\n    </Section>\n  )\n}\n","import React from 'react'\n\nimport { useMemo, useState } from 'react'\nimport { nanoid } from 'nanoid'\nimport SearchIcon from 'mdi-react/SearchIcon'\nimport { makeStyles } from '@material-ui/styles'\nimport clsx from 'clsx'\nimport Colors from '@data/colors.json'\n\ninterface IProps extends Omit<React.HTMLAttributes<HTMLInputElement>, 'onInput'> {\n  /**\n   * The type associated with the input element in the outputted HTML.\n   */\n  type?: 'text' | 'email' | 'password' | 'search'\n  /**\n   * Class for the outer-most element of the component (`<label>`).\n   */\n  className?: string\n  /**\n   * The default value used to populate the input field.\n   */\n  defaultValue?: string\n  /**\n   * A textual label to display on-screen.\n   */\n  label: string\n  /**\n   * An optional label to override the standard label, read only to screenreaders.\n   */\n  screenReaderLabel?: string\n  /**\n   * Callback triggered when text is inputted to the text input.\n   */\n  onInput: (val: string) => void\n  /**\n   * Optional input placeholder.\n   */\n  placeholder?: string\n  /**\n   * Optional helper text which appears under the textbox. Correctly linked via `aria-describedby`.\n   */\n  helpText?: React.ReactChild\n  /**\n   * An optional element to display at the start of the input field.\n   *\n   * If used to show units, for example, you should set an appropriate `screenReaderLabel` as these adornments are hidden to screenreaders.\n   */\n  startAdornment?: React.ReactChild\n  /**\n   * An optional element to display at the end of the input field.\n   *\n   * If used to show units, for example, you should set an appropriate `screenReaderLabel` as these adornments are hidden to screenreaders.\n   */\n  endAdornment?: React.ReactChild\n}\n\nconst useStyles = makeStyles({\n  inputLabel: {\n    '& > span': {\n      display: 'block',\n    },\n  },\n  inputWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: 8,\n    position: 'relative',\n    background: 'white',\n\n    border: '2px solid black',\n\n    '&:focus-within': {\n      borderColor: Colors.primaryRed,\n    },\n  },\n  startAppendix: {\n    paddingLeft: 8,\n  },\n  endAppendix: {\n    paddingRight: 8,\n  },\n  searchIcon: {\n    marginLeft: 8,\n  },\n  input: {\n    padding: '6px 8px',\n    border: 'none',\n    font: 'inherit',\n    width: '100%',\n\n    '&:focus': {\n      outline: 'none',\n    },\n\n    '&::-webkit-search-cancel-button': {\n      WebkitAppearance: 'none',\n      height: 24,\n      width: 24,\n      backgroundImage: `url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23777'><path d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/></svg>\")`,\n      cursor: 'pointer',\n    },\n  },\n  helpText: {\n    marginTop: 4,\n    marginBottom: 0,\n  },\n})\n\nexport default function TextBox({\n  label,\n  screenReaderLabel,\n  onInput,\n  type = 'text',\n  className,\n  defaultValue = '',\n  placeholder,\n  helpText,\n  startAdornment: startAppendix,\n  endAdornment: endAppendix,\n  ...attrs\n}: IProps) {\n  const [value, setValue] = useState(defaultValue)\n  const id = useMemo(() => nanoid(), [])\n  const helpTextId = useMemo(() => nanoid(), [])\n  const classes = useStyles()\n\n  return (\n    <label htmlFor={id} className={clsx(classes.inputLabel, className)} aria-label={screenReaderLabel}>\n      <span className=\"text-speak-up\">{label}</span>\n\n      <div className={classes.inputWrapper}>\n        {startAppendix && (\n          <span aria-hidden=\"true\" className={classes.startAppendix}>\n            {startAppendix}\n          </span>\n        )}\n        {type === 'search' && <SearchIcon role=\"presentation\" className={classes.searchIcon} />}\n        <input\n          type={type}\n          id={id}\n          className={classes.input}\n          onInput={e => {\n            const v = (e.target as HTMLInputElement).value\n            setValue(v)\n            onInput(v)\n          }}\n          value={value}\n          placeholder={placeholder}\n          aria-describedby={helpText ? helpTextId : undefined}\n          {...attrs}\n        />\n        {endAppendix && (\n          <span aria-hidden=\"true\" className={classes.endAppendix}>\n            {endAppendix}\n          </span>\n        )}\n      </div>\n\n      {helpText && (\n        <p id={helpTextId} className={clsx('text-whisper', classes.helpText)}>\n          {helpText}\n        </p>\n      )}\n    </label>\n  )\n}\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles({\n  linkButton: {\n    appearance: 'none',\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    textDecoration: 'underline',\n    fontFamily: 'inherit',\n    fontSize: '1em',\n    fontWeight: 700,\n    display: 'inline',\n    margin: 0,\n    padding: 0,\n  },\n})\n\ninterface Props {\n  className?: string\n  onClick: React.MouseEventHandler<HTMLButtonElement>\n}\n\nconst ButtonLink: React.FC<Props> = ({ children, className, onClick, ...props }) => {\n  const classes = useStyles()\n\n  return (\n    <button onClick={onClick} className={clsx(classes.linkButton, className)} {...props}>\n      {children}\n    </button>\n  )\n}\n\nexport default ButtonLink\n","const bandFreqs = {\n  B1: 2100,\n  B3: 1800,\n  B7: 2300,\n  B8: 900,\n  B20: 800,\n  B28: 700,\n  B29: 700,\n  B31: 450,\n  B32: 1500,\n  B38: 2600,\n  B40: 2600,\n  B67: 700,\n  n77: 3700,\n  n78: 3500,\n  n79: 4700,\n}\n\nexport default function bandNumberToFrequency(band: number | string): number {\n  if (typeof band === 'string') Object.keys(bandFreqs).includes(band) || (band = parseInt(band.substring(1)))\n\n  return bandFreqs[band] ?? -1\n}\n","import bandNumberToFrequency from './bandNumberToFrequency'\n\nconst bandNames = {\n  B1: 'IMT',\n  B3: 'DCS',\n  B7: 'IMT-E',\n  B8: 'GSM',\n  B20: 'EU Digital Dividend',\n  B28: 'APT',\n  B29: 'SDL',\n  B31: 'NMT',\n  B32: 'L-Band SDL',\n  B38: 'IMT-E',\n  B40: 'S-Band',\n  B46: 'LAA',\n  B67: 'EU SDL',\n  n77: 'C-Band',\n  n78: 'C-Band',\n  n79: 'C-Band',\n  n257: 'mmWave LMDS',\n  n258: 'mmWave K-band',\n}\n\nexport default function bandNumberToName(band: number | string): string {\n  if (typeof band === 'string') Object.keys(bandNames).includes(band) || (band = parseInt(band.substring(1)))\n\n  const freq = bandNumberToFrequency(band)\n\n  if (freq === -1) return ''\n\n  return bandNames[band] ? `${freq} MHz ${bandNames[band]}` : `${freq}`\n}\n","import React, { useRef, useState } from 'react'\n\nimport Section from '@components/Design/Section'\nimport { HighlightedSpectrum, ISpectrumAllocation, SpectrumMap } from '@components/BlogComponents/MdxComponents'\nimport TextBox from '@components/Inputs/TextBox'\n\nimport Breakpoints from '@data/breakpoints'\nimport bandNumberToName from '@functions/bandNumberToName'\n\nimport { makeStyles } from '@material-ui/core'\nimport clsx from 'clsx'\nimport { nanoid } from 'nanoid'\nimport { arfcnToBand } from '@functions/ArfcnConversion/arfcnToBand'\nimport { arfcnToFreq } from '@functions/ArfcnConversion'\nimport useStateWithLocalStorage from '@functions/hooks/useStateWithLocalStorage'\nimport Link from '@components/Links/Link'\n\nconst useStyles = makeStyles({\n  heading: {\n    marginTop: 28,\n  },\n  fieldsetsContainer: {\n    marginTop: 16,\n    display: 'grid',\n    gridTemplateColumns: 'auto 1fr',\n    gap: 16,\n\n    [Breakpoints.upTo.tablet]: {\n      gridTemplateColumns: '1fr',\n    },\n  },\n  highlightFieldset: {\n    padding: '16px 24px',\n    background: '#fff',\n\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n\n    '& legend': {\n      // Prevent browser rendering it as a fieldset legend\n      float: 'left',\n      marginBottom: 12,\n      fontWeight: 'bold',\n    },\n  },\n  freqFieldset: {\n    display: 'grid',\n    gap: 16,\n    placeContent: 'center',\n    gridTemplateColumns: '1fr',\n\n    '& > a': {\n      justifySelf: 'center',\n    },\n\n    [Breakpoints.downTo.tablet]: {\n      gridTemplateColumns: '1fr 1fr',\n      rowGap: 4,\n\n      '& > a': {\n        gridColumn: 'span 2',\n      },\n\n      '& > label': {\n        // Visually centring because actual centring looks offset\n        transform: 'translateY(-4px)',\n      },\n    },\n  },\n  clearfix: {\n    '&::after': {\n      display: 'block',\n      content: '\"\"',\n      clear: 'both',\n    },\n  },\n  radioGroup: {\n    '&:not(:last-child)': {\n      marginBottom: 12,\n    },\n  },\n  radio: {\n    opacity: 0,\n    position: 'absolute',\n\n    '& + label': {\n      display: 'block',\n      position: 'relative',\n      paddingLeft: 'var(--left-pad)',\n      WebkitUserSelect: 'none',\n      userSelect: 'none',\n\n      '--left-pad': 'calc(1em + 16px)',\n      '--radio-size': '1.35em',\n      '--radio-border-size': '2px',\n      '--radio-y-offset': '0.05em',\n\n      '&::before, &::after': {\n        content: '\"\"',\n        display: 'block',\n        position: 'absolute',\n        borderRadius: '50%',\n        overflow: 'hidden',\n\n        top: 'calc(50% - var(--radio-y-offset))',\n        transform: 'translateY(-50%)',\n\n        width: 'var(--size)',\n        height: 'var(--size)',\n\n        cursor: 'pointer',\n      },\n\n      '&::before': {\n        '--size': 'var(--radio-size)',\n        left: 0,\n        background: 'white',\n        border: 'var(--radio-border-size) solid black',\n      },\n\n      '&::after': {\n        '--bg': 'white',\n        '--x-pad': 'calc(var(--radio-border-size) + 4px)',\n        '--size': 'calc(var(--radio-size) - (2 * var(--x-pad)))',\n        left: 'var(--x-pad)',\n        background: 'var(--bg)',\n      },\n    },\n\n    '&:checked + label::after': {\n      '--bg': 'black',\n    },\n  },\n})\n\ninterface IAllSpectrumMaps {\n  bandsData: {\n    band: string | number | number[] | string[]\n    data: ISpectrumAllocation[]\n  }[]\n  locationName: string\n}\n\nexport default function AllSpectrumMaps({ bandsData, locationName }: IAllSpectrumMaps) {\n  const classes = useStyles()\n\n  const [highlightValueType, setHighlightValueType] = useStateWithLocalStorage<'EARFCN' | 'frequency' | 'EARFCN+BW'>(\n    'spectrumMapHighlightType',\n    'EARFCN+BW',\n  )\n  const [startHighlight, setStartHighlight] = useState<{ text: string; val: number | null }>({ text: '', val: NaN })\n  const [endHighlight, setEndHighlight] = useState<{ text: string; val: number | null }>({ text: '', val: NaN })\n  const [highlightBandwidth, setHighlightBandwidth] = useState<{ text: string; val: number | null }>({ text: '', val: NaN })\n\n  const { current: formIds } = useRef({\n    highlightTypeArfcn: nanoid(),\n    highlightTypeArfcnBw: nanoid(),\n    highlightTypeFreq: nanoid(),\n  })\n\n  const isHighlightPresent = (() => {\n    if (['EARFCN', 'frequency'].includes(highlightValueType)) {\n      if (isNaN(startHighlight.val) || isNaN(endHighlight.val)) return false\n    }\n\n    if (highlightValueType === 'EARFCN+BW') {\n      if (isNaN(startHighlight.val) || isNaN(highlightBandwidth.val)) return false\n    }\n\n    if (highlightValueType === 'EARFCN') {\n      if (!arfcnToFreq('lte', startHighlight.val, 'dl')) return false\n      if (!arfcnToFreq('lte', endHighlight.val, 'dl')) return false\n    }\n\n    if (highlightValueType === 'EARFCN+BW') {\n      if (!arfcnToFreq('lte', startHighlight.val, 'dl')) return false\n      if (isNaN(highlightBandwidth.val)) return false\n    }\n\n    return true\n  })()\n\n  const spectrumHighlight: HighlightedSpectrum[] | undefined = ((): HighlightedSpectrum[] | undefined => {\n    if (!isHighlightPresent) return undefined\n\n    if (highlightValueType === 'EARFCN+BW') {\n      const earfcnCtr = startHighlight.val\n\n      if (isNaN(earfcnCtr)) return undefined\n\n      const freqCtr = arfcnToFreq('lte', earfcnCtr, 'dl')\n\n      return [\n        {\n          startFreq: freqCtr - highlightBandwidth.val / 2,\n          endFreq: freqCtr + highlightBandwidth.val / 2,\n          rat: 'lte',\n        } as unknown as HighlightedSpectrum,\n      ]\n    }\n\n    if (highlightValueType === 'frequency') {\n      return [\n        {\n          startFreq: Math.min(startHighlight.val, endHighlight.val),\n          endFreq: Math.max(startHighlight.val, endHighlight.val),\n          rat: 'lte',\n        } as unknown as HighlightedSpectrum,\n      ]\n    }\n\n    return [\n      {\n        startArfcn: Math.min(startHighlight.val, endHighlight.val),\n        endArfcn: Math.max(startHighlight.val, endHighlight.val),\n        rat: 'lte',\n      } as unknown as HighlightedSpectrum,\n    ]\n  })()\n\n  return (\n    <Section width=\"wider\">\n      <h2 className=\"text-louder\">Frequency deployment</h2>\n\n      <Section width=\"full\" darker>\n        <h3 className=\"text-loud\">Highlight spectrum</h3>\n        <p>\n          Highlight a section of spectrum with a pink line on the visualisations below using an EARFCN and bandwidth, start and end EARFCN, or\n          start and end frequency.\n        </p>\n\n        <div className={classes.fieldsetsContainer}>\n          <fieldset className={classes.highlightFieldset}>\n            <legend>Highlight by</legend>\n            <span className={classes.clearfix} />\n\n            <div className={classes.radioGroup}>\n              <input\n                type=\"radio\"\n                className={classes.radio}\n                name=\"highlight-data-type\"\n                id={formIds.highlightTypeArfcnBw}\n                value=\"arfcn+bw\"\n                onChange={() => setHighlightValueType('EARFCN+BW')}\n                checked={highlightValueType === 'EARFCN+BW'}\n              />\n              <label htmlFor={formIds.highlightTypeArfcnBw}>EARFCN + Bandwidth</label>\n            </div>\n\n            <div className={classes.radioGroup}>\n              <input\n                type=\"radio\"\n                className={classes.radio}\n                name=\"highlight-data-type\"\n                id={formIds.highlightTypeArfcn}\n                value=\"arfcn\"\n                onChange={() => setHighlightValueType('EARFCN')}\n                checked={highlightValueType === 'EARFCN'}\n              />\n              <label htmlFor={formIds.highlightTypeArfcn}>Start/end EARFCN</label>\n            </div>\n\n            <div className={classes.radioGroup}>\n              <input\n                type=\"radio\"\n                className={classes.radio}\n                name=\"highlight-data-type\"\n                id={formIds.highlightTypeFreq}\n                value=\"frequency\"\n                onChange={() => setHighlightValueType('frequency')}\n                checked={highlightValueType === 'frequency'}\n              />\n              <label htmlFor={formIds.highlightTypeFreq}>Start/end Frequency</label>\n            </div>\n          </fieldset>\n\n          <fieldset className={clsx(classes.highlightFieldset, classes.freqFieldset)}>\n            {highlightValueType === 'EARFCN' && (\n              <>\n                <TextBox\n                  label=\"Start EARFCN\"\n                  onInput={v => setStartHighlight({ text: v, val: parseFloat(v) })}\n                  defaultValue={startHighlight.text}\n                  pattern=\"[0-9]*\"\n                  inputMode=\"numeric\"\n                />\n                <TextBox\n                  label=\"End EARFCN\"\n                  onInput={v => setEndHighlight({ text: v, val: parseFloat(v) })}\n                  defaultValue={endHighlight.text}\n                  pattern=\"[0-9]*\"\n                  inputMode=\"numeric\"\n                />\n              </>\n            )}\n            {highlightValueType === 'frequency' && (\n              <>\n                <TextBox\n                  label=\"Start frequency\"\n                  screenReaderLabel=\"Start frequency, in MHz\"\n                  endAdornment=\"MHz\"\n                  defaultValue={startHighlight.text}\n                  onInput={v => setStartHighlight({ text: v, val: parseFloat(v) })}\n                  pattern=\"[0-9]*\"\n                  inputMode=\"numeric\"\n                />\n                <TextBox\n                  label=\"End frequency\"\n                  screenReaderLabel=\"End frequency, in MHz\"\n                  endAdornment=\"MHz\"\n                  defaultValue={endHighlight.text}\n                  onInput={v => setEndHighlight({ text: v, val: parseFloat(v) })}\n                  pattern=\"[0-9]*\"\n                  inputMode=\"numeric\"\n                />\n              </>\n            )}\n            {highlightValueType === 'EARFCN+BW' &&\n              (() => {\n                const band = arfcnToBand('lte', startHighlight.val, 'dl')\n\n                return (\n                  <>\n                    <TextBox\n                      helpText={(() => {\n                        if (startHighlight.text === '') return ''\n                        if (isNaN(startHighlight.val)) return 'Invalid EARFCN'\n                        if (band === null) return 'Unrecognised EARFCN'\n\n                        return `LTE Band ${band} (${arfcnToFreq('lte', startHighlight.val, 'dl')} MHz)`\n                      })()}\n                      label=\"EARFCN\"\n                      defaultValue={startHighlight.text}\n                      onInput={v => setStartHighlight({ text: v, val: parseInt(v) })}\n                      pattern=\"[0-9]*\"\n                      inputMode=\"numeric\"\n                    />\n                    <TextBox\n                      helpText={(() => {\n                        if (!isHighlightPresent) return ''\n\n                        const earfcnCtr = startHighlight.val\n                        const freqCtr = arfcnToFreq('lte', earfcnCtr, 'dl')\n                        return `${Math.max(0, freqCtr - highlightBandwidth.val / 2)} - ${freqCtr + highlightBandwidth.val / 2} MHz`\n                      })()}\n                      label=\"Bandwidth\"\n                      screenReaderLabel=\"Bandwidth, in MHz\"\n                      endAdornment=\"MHz\"\n                      defaultValue={highlightBandwidth.text}\n                      onInput={v => setHighlightBandwidth({ text: v, val: parseFloat(v) })}\n                      pattern=\"[0-9]*\"\n                      inputMode=\"numeric\"\n                    />\n                    {band && bandsData.map(b => b.band).includes(`B${band}`) && (\n                      <Link className=\"text-whisper-loud\" href={`#band-B${band}`}>\n                        Scroll to Band {band}\n                      </Link>\n                    )}\n                  </>\n                )\n              })()}\n          </fieldset>\n        </div>\n      </Section>\n\n      {bandsData.map((bandData, i) => {\n        return (\n          <React.Fragment key={JSON.stringify(bandData.band)}>\n            <h3 id={`band-${bandData.band}`} className={clsx('text-loud', classes.heading)}>\n              {Array.isArray(bandData.band) ? `Bands ${bandData.band.join(', ')}` : `Band ${bandData.band}`}\n            </h3>\n\n            <SpectrumMap\n              data={bandData.data}\n              spectrumHighlight={spectrumHighlight}\n              caption={`${locationName} spectrum deployment for ${\n                Array.isArray(bandData.band) ? `Bands ${bandData.band.join(', ')}` : `Band ${bandData.band} (${bandNumberToName(bandData.band)})`\n              }`}\n            />\n          </React.Fragment>\n        )\n      })}\n    </Section>\n  )\n}\n","import React, { useState } from 'react'\n\n/**\n * Wrapper for React's `useState` hook that persists data in the browser's LocalStorage.\n *\n * The value must be `JSON.stringify`/`parse`-able in order to successfully store itself\n * in LocalStorage.\n *\n * Can accept an optional third parameter to validate the persisted value of the state\n * to ensure it is acceptable before it gets loaded as the initial state. This should be\n * prepared to accept any value as input, and should return a boolean: `true` meaning\n * valid and `false` meaning invalid.\n */\nexport default function useStateWithLocalStorage<T>(\n  key: string,\n  initialValue: T,\n  validator: (input: any) => boolean = () => true,\n): [T, React.Dispatch<React.SetStateAction<T>>, () => void] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n\n      if (item) {\n        const parsed = JSON.parse(item)\n        if (validator(parsed)) {\n          return parsed\n        }\n      }\n      return initialValue\n    } catch (error) {\n      // If error also return initialValue\n      console.error(error)\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: React.Dispatch<React.SetStateAction<T>> = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.warn(error)\n    }\n  }\n\n  /**\n   * Resets the stored and actual state back to the initial value provided\n   * to the hook call.\n   */\n  const resetValue = () => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = initialValue\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.warn(error)\n    }\n  }\n\n  return [storedValue, setValue, resetValue]\n}\n","import { earfcnCalcData } from './arfcnToFreq'\n\nexport function arfcnToBand(rat: 'lte' | 'nr' | 'umts' | 'gsm', arfcn: number, type: 'dl' | 'ul'): number | null {\n  if (rat === 'lte') {\n    const [band] =\n      Object.entries(earfcnCalcData).find(([_, v]) => {\n        if (!(`${type}FreqLow` in v)) return false\n\n        const bw = v[`${type}FreqHigh`] - v[`${type}FreqLow`]\n\n        return arfcn >= v[`${type}ArfcnOffset`] && arfcn < v[`${type}ArfcnOffset`] + 10 * bw\n      }) ?? []\n\n    if (!band) return null\n\n    return parseInt(band)\n  }\n}\n","import { ISpectrumAllocation } from '@components/BlogComponents/MdxComponents'\n\nexport function mapBandAndData(number: number | string | number[] | string[], data: ISpectrumAllocation[]) {\n  return { band: number, data }\n}\n"],"names":["ex","React","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","SearchIcon","_ref","_ref$color","color","undefined","_ref$size","size","props","children","obj","keys","indexOf","objectWithoutProperties","className","createElement","width","height","fill","viewBox","d","SearchIcon$1","memo","module","exports","useStyles","makeStyles","listRoot","display","flexWrap","margin","padding","separator","WebkitUserSelect","userSelect","Breadcrumbs","data","classes","breadcrumbsToDisplay","useState","breadcrumbsExpanded","setBreadcrumbsExpanded","darker","usePadding","index","crumb","onClick","url","href","type","JSON","itemListElement","position","item","name","t","inputLabel","inputWrapper","alignItems","marginTop","background","border","borderColor","Colors","startAppendix","paddingLeft","endAppendix","paddingRight","searchIcon","marginLeft","input","font","outline","WebkitAppearance","backgroundImage","cursor","helpText","marginBottom","TextBox","label","screenReaderLabel","onInput","defaultValue","placeholder","startAdornment","endAdornment","attrs","value","setValue","id","useMemo","nanoid","helpTextId","htmlFor","clsx","role","e","v","linkButton","appearance","textDecoration","fontFamily","fontSize","fontWeight","bandFreqs","B1","B3","B7","B8","B20","B28","B29","B31","B32","B38","B40","B67","n77","n78","n79","bandNames","B46","n257","n258","bandNumberToName","band","parseInt","freq","bandNumberToFrequency","heading","fieldsetsContainer","gridTemplateColumns","gap","Breakpoints","highlightFieldset","flexDirection","justifyContent","float","freqFieldset","placeContent","justifySelf","rowGap","gridColumn","transform","clearfix","content","clear","radioGroup","radio","opacity","borderRadius","overflow","top","left","AllSpectrumMaps","bandsData","locationName","validator","window","parsed","initialValue","console","storedValue","setStoredValue","valueToStore","useStateWithLocalStorage","highlightValueType","setHighlightValueType","text","val","NaN","startHighlight","setStartHighlight","endHighlight","setEndHighlight","highlightBandwidth","setHighlightBandwidth","formIds","useRef","highlightTypeArfcn","highlightTypeArfcnBw","highlightTypeFreq","isHighlightPresent","isNaN","arfcnToFreq","spectrumHighlight","earfcnCtr","freqCtr","startFreq","endFreq","rat","Math","startArfcn","endArfcn","onChange","checked","parseFloat","pattern","inputMode","bw","arfcn","arfcnToBand","b","bandData","Array","caption","mapBandAndData","number"],"sourceRoot":""}